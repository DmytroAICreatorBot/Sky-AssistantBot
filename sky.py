import os
import subprocess
import webbrowser
import requests
import customtkinter as ctk
import pyttsx3
import speech_recognition as sr
import threading
import shutil
import queue
from datetime import datetime
import time
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏ –∫–ª—é—á API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
project_dir = os.getenv("PROJECT_DIR")
user_name_file = os.path.join(project_dir, "sky_user.txt")
history_file = os.path.join(project_dir, "sky_history.txt")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GUI
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è speech engine
def init_speech_engine():
    eng = pyttsx3.init()
    voices = eng.getProperty('voices')
    for v in voices:
        if 'russian' in v.name.lower() or '—Ä—É—Å' in v.name.lower():
            eng.setProperty('voice', v.id)
            break
    eng.setProperty('rate', 160)
    eng.setProperty('volume', 1.0)
    return eng

engine = init_speech_engine()
use_voice_output = True

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ñ–ª–∞–≥ –∏ —Ñ—É–Ω–∫—Ü–∏—è
auto_start_enabled = False
auto_start_thread = None
auto_start_event = threading.Event()

def auto_start_worker():
    while not auto_start_event.is_set():
        user_input = "–ü—Ä–∏–≤–µ—Ç"
        response = get_sky_response(user_input)
        output.configure(state="normal")
        output.insert("end", f"–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫:\n–¢—ã: {user_input}\nSKY: {response}\n\n")
        output.see("end")
        output.configure(state="disabled")
        speak(response)
        for _ in range(30):
            if auto_start_event.is_set():
                break
            time.sleep(1)

def toggle_auto_start():
    global auto_start_enabled, auto_start_thread, auto_start_event
    if auto_start_enabled:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        auto_start_event.set()
        auto_start_thread = None
        auto_start_enabled = False
        btn_auto_start.configure(text="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", fg_color="#1f6aa5")
        output.configure(state="normal")
        output.insert("end", "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.\n\n")
        output.configure(state="disabled")
        speak("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        auto_start_event.clear()
        auto_start_thread = threading.Thread(target=auto_start_worker, daemon=True)
        auto_start_thread.start()
        auto_start_enabled = True
        btn_auto_start.configure(text="–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", fg_color="#3b8ed0")
        output.configure(state="normal")
        output.insert("end", "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω.\n\n")
        output.configure(state="disabled")
        speak("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω.")

# –û—á–µ—Ä–µ–¥—å –∏ –ø–æ—Ç–æ–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏ (TTS)
tts_queue = queue.Queue()

def tts_worker():
    while True:
        text = tts_queue.get()
        if text is None:
            break
        engine.say(text)
        engine.runAndWait()
        tts_queue.task_done()

threading.Thread(target=tts_worker, daemon=True).start()

def speak(text):
    if use_voice_output:
        tts_queue.put(text)

def get_user_name():
    if os.path.exists(user_name_file):
        return open(user_name_file, "r", encoding="utf-8").read().strip()
    else:
        name = "–î—Ä—É–≥"
        open(user_name_file, "w", encoding="utf-8").write(name)
        return name

MAX_HISTORY_DISPLAY = 30

def append_to_history(user, assistant):
    with open(history_file, "a", encoding="utf-8") as f:
        f.write(f"–¢—ã: {user}\nSKY: {assistant}\n\n")

def get_history():
    if os.path.exists(history_file):
        with open(history_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
            return ''.join(lines[-MAX_HISTORY_DISPLAY*2:])
    return "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."

def clear_history():
    open(history_file, "w", encoding="utf-8").close()

API_KEY = os.getenv("API_KEY")

chat_history = [
    {"role": "system", "content": "–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ SKY. –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–º–Ω—ã–π –∏ –≥–æ–≤–æ—Ä–∏—à—å –ø–æ-—Ä—É—Å—Å–∫–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏."}
]

def get_openrouter_response(prompt):
    chat_history.append({"role": "user", "content": prompt})
    url = "https://openrouter.ai/api/v1/chat/completions"
    resp = requests.post(url, headers={
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }, json={"model": "meta-llama/llama-3-8b", "messages": chat_history})
    if resp.status_code == 200:
        answer = resp.json()["choices"][0]["message"]["content"]
        chat_history.append({"role": "assistant", "content": answer})
        return answer
    return f"–û—à–∏–±–∫–∞ API: {resp.status_code}"

def clear_memory():
    global chat_history
    chat_history = [
        {"role": "system", "content": "–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ SKY. –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–º–Ω—ã–π –∏ –≥–æ–≤–æ—Ä–∏—à—å –ø–æ-—Ä—É—Å—Å–∫–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏."}
    ]
    output.configure(state="normal")
    output.insert("end", "üß† –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.\n\n")
    output.configure(state="disabled")
    speak("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")

def get_sky_response(user_input):
    ui = user_input.lower()
    name = get_user_name()
    resp = ""
    try:
        if "–ø—Ä–∏–≤–µ—Ç" in ui:
            resp = f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø SKY."
        elif "–≤—Ä–µ–º—è" in ui:
            resp = f"{name}, —Å–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}."
        elif "–∫–∞–∫ –¥–µ–ª–∞" in ui:
            resp = f"–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, {name}! –ê —É —Ç–µ–±—è?"
        elif "–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä" in ui:
            subprocess.Popen(os.getenv("BROWSER_PATH"))
            resp = "–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä."
        elif "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É" in ui:
            fn = ui.split("—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É")[-1].strip()
            os.makedirs(fn, exist_ok=True)
            resp = f"–ü–∞–ø–∫–∞ '{fn}' —Å–æ–∑–¥–∞–Ω–∞."
        elif "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª" in ui:
            fn = ui.split("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª")[-1].strip()
            open(fn, 'w', encoding="utf-8").close()
            resp = f"–§–∞–π–ª '{fn}' —Å–æ–∑–¥–∞–Ω."
        elif "–æ—Ç–∫—Ä–æ–π —Ñ–∞–π–ª" in ui or "–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É" in ui:
            path = ui.split("–æ—Ç–∫—Ä–æ–π —Ñ–∞–π–ª")[-1].strip() if "–æ—Ç–∫—Ä–æ–π —Ñ–∞–π–ª" in ui else ui.split("–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É")[-1].strip()
            os.startfile(path)
            resp = f"–û—Ç–∫—Ä—ã–≤–∞—é '{path}'."
        elif "—É–¥–∞–ª–∏ —Ñ–∞–π–ª" in ui or "—É–¥–∞–ª–∏ –ø–∞–ø–∫—É" in ui:
            path = ui.split("—É–¥–∞–ª–∏ —Ñ–∞–π–ª")[-1].strip() if "—É–¥–∞–ª–∏ —Ñ–∞–π–ª" in ui else ui.split("—É–¥–∞–ª–∏ –ø–∞–ø–∫—É")[-1].strip()
            if os.path.isfile(path):
                os.remove(path)
                resp = f"–§–∞–π–ª '{path}' —É–¥–∞–ª—ë–Ω."
            elif os.path.isdir(path):
                shutil.rmtree(path)
                resp = f"–ü–∞–ø–∫–∞ '{path}' —É–¥–∞–ª–µ–Ω–∞."
            else:
                resp = f"–ü—É—Ç—å '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        elif "–∑–∞–ø—É—Å—Ç–∏ –º—É–∑—ã–∫—É" in ui:
            subprocess.Popen(os.getenv("MUSIC_PATH"))
            resp = "–ó–∞–ø—É—Å–∫–∞—é –º—É–∑—ã–∫—É."
        elif "–æ—Å—Ç–∞–Ω–æ–≤–∏ –º—É–∑—ã–∫—É" in ui:
            subprocess.run(["taskkill","/IM","Spotify.exe","/F"])
            resp = "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º—É–∑—ã–∫—É."
        elif "–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ" in ui:
            q = ui.split("–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")[-1].strip()
            webbrowser.open(f"https://www.google.com/search?q={q.replace(' ', '+')}")
            resp = f"–ò—â—É: {q}"
        elif "–ø–æ–≥–æ–¥–∞ –≤" in ui:
            city = ui.split("–ø–æ–≥–æ–¥–∞ –≤")[-1].strip()
            geo = requests.get("https://nominatim.openstreetmap.org/search", params={"q":city,"format":"json","limit":1}, headers={"User-Agent":"SKY"})
            if not geo.json():
                resp = f"–ù–µ –Ω–∞—à—ë–ª –≥–æ—Ä–æ–¥ '{city}'."
            else:
                lat, lon = geo.json()[0]["lat"], geo.json()[0]["lon"]
                w = requests.get("https://api.open-meteo.com/v1/forecast", params={"latitude":lat,"longitude":lon,"current_weather":"true"}).json()["current_weather"]
                resp = f"{name}, –≤ {city}: {w['temperature']}¬∞C, –≤–µ—Ç–µ—Ä {w['windspeed']} –∫–º/—á."
        elif "–ø–µ—Ä–µ–∫–ª—é—á–∏ —Ä–µ–∂–∏–º" in ui:
            global use_voice_output
            use_voice_output = not use_voice_output
            resp = "–û–∑–≤—É—á–∫–∞ " + ("–≤–∫–ª—é—á–µ–Ω–∞" if use_voice_output else "–≤—ã–∫–ª—é—á–µ–Ω–∞")
        elif "–ø–æ–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é" in ui:
            resp = get_history()
        elif "–æ—á–∏—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é" in ui:
            clear_history()
            resp = "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞."
        elif "—Ç–∞–π–º–µ—Ä" in ui:
            seconds = 0
            match = re.search(r'(\d+)\s*(—Å–µ–∫—É–Ω–¥|—Å–µ–∫|–º–∏–Ω—É—Ç|–º–∏–Ω|—á–∞—Å)', ui)
            if match:
                value = int(match.group(1))
                unit = match.group(2)
                if unit.startswith("—Å–µ–∫"):
                    seconds = value
                elif unit.startswith("–º–∏–Ω"):
                    seconds = value * 60
                elif unit.startswith("—á–∞—Å"):
                    seconds = value * 3600
            if seconds > 0:
                resp = f"–ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä –Ω–∞ {value} {unit}."
                threading.Thread(target=timer_thread, args=(seconds,), daemon=True).start()
            else:
                resp = "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞."
        elif ui.strip() == "–æ—á–∏—Å—Ç–∏ –ø–∞–º—è—Ç—å":
            clear_memory()
            resp = "–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞."
        else:
            resp = get_openrouter_response(user_input)
    except Exception as e:
        resp = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}"
    append_to_history(user_input, resp)
    return resp

def timer_thread(seconds):
    time.sleep(seconds)
    output.configure(state="normal")
    output.insert("end", f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n")
    output.see("end")
    output.configure(state="disabled")
    speak(f"–¢–∞–π–º–µ—Ä –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!")

def recognize_speech_from_mic(recognizer, microphone):
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source, phrase_time_limit=5)
    try:
        return recognizer.recognize_google(audio, language="ru-RU")
    except sr.UnknownValueError:
        return ""
    except sr.RequestError:
        return ""

# –ì–æ—Ä—è—á–µ–µ —Å–ª–æ–≤–æ
def hotword_listener():
    recognizer = sr.Recognizer()
    mic = sr.Microphone()
    while True:
        print("–°–ª—É—à–∞—é –≥–æ—Ä—è—á–µ–µ —Å–ª–æ–≤–æ...")
        text = recognize_speech_from_mic(recognizer, mic).lower()
        if "sky" in text:
            output.configure(state="normal")
            output.insert("end", "üîî –ì–æ—Ä—è—á–µ–µ —Å–ª–æ–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...\n")
            output.see("end")
            output.configure(state="disabled")
            speak("–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É")
            cmd = recognize_speech_from_mic(recognizer, mic)
            if cmd:
                output.configure(state="normal")
                output.insert("end", f"–¢—ã: {cmd}\n")
                output.configure(state="disabled")
                resp = get_sky_response(cmd)
                output.configure(state="normal")
                output.insert("end", f"SKY: {resp}\n\n")
                output.see("end")
                output.configure(state="disabled")
                speak(resp)

# GUI
root = ctk.CTk()
root.title("SKY Assistant")
root.geometry("700x550")

frame = ctk.CTkFrame(root)
frame.pack(padx=10, pady=10, fill="both", expand=True)

output = ctk.CTkTextbox(frame, state="disabled", width=680, height=400)
output.pack(padx=10, pady=10, fill="both", expand=True)

entry = ctk.CTkEntry(frame, width=600)
entry.pack(side="left", padx=10, pady=10, fill="x", expand=True)

def on_send():
    user_text = entry.get().strip()
    if not user_text:
        return
    output.configure(state="normal")
    output.insert("end", f"–¢—ã: {user_text}\n")
    output.configure(state="disabled")
    entry.delete(0, "end")
    threading.Thread(target=process_input, args=(user_text,), daemon=True).start()

def process_input(text):
    resp = get_sky_response(text)
    output.configure(state="normal")
    output.insert("end", f"SKY: {resp}\n\n")
    output.see("end")
    output.configure(state="disabled")
    speak(resp)

send_button = ctk.CTkButton(frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=on_send)
send_button.pack(side="right", padx=10, pady=10)

btn_auto_start = ctk.CTkButton(root, text="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", command=toggle_auto_start, fg_color="#1f6aa5")
btn_auto_start.pack(pady=5)

threading.Thread(target=hotword_listener, daemon=True).start()

root.mainloop()

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
tts_queue.put(None)
auto_start_event.set()
